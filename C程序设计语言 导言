C 由贝尔实验的Dennis Ritchie于1973设计并实现的。C++和Java由此诞生UNIX依此实现，1988年，美国国家标准协会ANSI为C语言指定了标准。

1 导言
------------------------------------------------------
1.1 入门
任务：请打印出Hello，world
#include <stdio.h>

main()
{
printf("hello,world\n")
}
-------------------------------------------------
1.2 变量与算术表达式
任务：使用公式C=（5/9）（F-32）打印下列华氏温度与摄氏温度对照表
#include <stdio.h>

/*当fahr=0,20,...,300时，分别打印华氏温度和摄氏温度对照表*/
main()
{
    float fahr, celsius;
    int lower, upper, step;

    lower = 0;/*温度表的下限*/
    upper = 300;/*温度表的上限*/
    step = 20/*步长*/

    fahr = lower;
    while(fahr <= upper){
        celsius=(5.0/9.0)*(fahr-32.0);
        printf("%3.0f %6.1f\n", fahr, celsius);
        fahr = fahr + step;
    }
}
--------------------------------------------------------
1.3 for 语句
#inculde <stdio.h>

/*打印华氏-摄氏温度对照表*/
main()
{
    int fahr;
    
    for(fahr = 0; fahr <= 300; fahr = fahr + 20)
        printf("%3d %6.1f/n", fahr, (5.0/9.0)*(fahr-32));
}
------------------------------------------------------------
1.4 符号常量
#include <stdio.h>

#define LOWER 0
#define UPPER 300
#define STEP  20

/*打印华氏-摄氏温度对照表*/
main
{
    int fahr;
    for(fahr = LOWER; fahr <= UPPER; fahr = fahr +STEP)
           printf("%3d %6.1f/n", fahr, (5.0/9.0)*(fahr-32));
}
---------------------------------------------------------------
1.5 字符输入/输出
标准库提供了一次读/写一个字符的函数，其中最简单的是getchar和putchar。
c = getchar() /*每次调用时，getchar函数从文本流中读入下一个输入字符，并将其作为结果值返回。
putchar(c)/*每次调用时，putchar函数将打印一个字符

任务1.5-1：把输入一次一个字符地复制到输出
#include <stdiol.h>

/*将输入复制到输出；版本1*/
main()
{
    int c;
    
    c = getchar();
    while(c != EOF){
        putchar(c);
        c = getchar();
    }    
}

#include <stdiol.h>

/*将输入复制到输出；版本2*/
main()
{
    int c;
    while((c = getchar())!= EOF)
        putchar(c);
}

任务1.5-2：字符计数
#include <stdio.h>
/* 统计输入的字符数；版本1*/
main()
{
    long nc;
    nc = 0;
    while(getchar()!= EOF)
        ++nc;
    printf("%1d\n", nc);
}

任务1.5-3：行计数
#include <stdio.h>
/* 统计输入行数*/
main()
{
    int c, nl;

    nl = 0;
    while((c= getchar())!= EOF)
        if (c == '\n')
            ++n1;
    printf("%d\n", n1);
}

任务1.5-4：单词计数
#include <stdio.h>

#define IN 1 /* 在单词内*/
#define OUT 0/*在单词外*/
/*统计输入的行数、单词数与字符数*/
main()
{
    int c, n1, nw, nc, state;

    state = OUT;
    n1 = nw = nc = 0;
    while((c= getchar())!= EOF)
        ++nc;
        if (c == '\n')
            ++n1;
        if (c == ' '|| c == '\n' || c == '\t')
            state = OUT;
        else if (state == OUT){
            state = IN;
            ++nw;        
        }
    }
    print("%d %d %d\n", n1, nw, nc);    
}
-------------------------------------------------------
1·6 数组
任务：统计各个数字、空白符（包括空格符、制表符及换行符）以及所有其他字符出现的次数
#include <stdio.h>

/* 统计各个数字、空白符以及所有其他字符出现的次数*/
main()
{
    int c, i, nwhite, nother
    int ndigit[10];
    
    nwhite = nother = 0;
    for (i=0; i<10; ++i)
        ndigit[i] = 0;
    
    while ({(C = getchar()}1=EOF))
        if (c >='0' && c<='9')
            ++ndigit[c-'0'];
        else if (c == '' || c == '\n' || c == '\t')
            ++nwhite;
        else
            ++nother;
            
    printf("dights =")
    for (i = 0; i < 10; ++i)
        printf("d%, ndigit[i]");
    printf(", white space = d%, other = %d\n, nwhite, nother);
}
-------------------------------------------------------------------
1.7函数
任务：power函数
#include <stdio.h>

int power(int m, int n);

/*测试power函数*/
main
{
    int i;
    
    for (i = 0; i < 10; ++i)
         print("%d %d %d\n", i, power(2,i, poer(-3,i)));
     return 0;
}
/*power函数求底数的n次幂；其中n>=0*/
int power(int base, int n)
{
    int i, p;
    p = 1;
    for(i = 1; i <= n; ++i)
        p = p * base;
    return p;
}
-------------------------------------------------------------------------
1.8 参数——传值调用
参数可以看作便于初始化的局部变量，使得额外使用的变量变少。
/*power函数求底数的n次幂；其中n>=0，版本2*/
int power(int base, int n)
{
    int  p;
    for(p = 1; n > 0; --n)
        p = p * base;
    return p;
}
-------------------------------------------------------------------------
1.9 字符数组
任务：读入一组文本行，并把最长的文本打印出来
while(还有未处理的行)
if(该行比已处理的最长行还要长)
    保存该行
    保存该行的长度
打印最长的行
include <stdio.h>
#define MAXLINE 1000 /* 允许输入行的最大长度  */

int getline(char line[], int maxline);
void copy(char to[], char from[])

/* 打印最长的输入行 */
main()
{
    in len    /*当前行长度*/
    int max;     /*目前为止发现最长行的长度*/
    char line[MAXLINE]    /*当前输入行*/
    char longest[MAXLINE];  /* 用于保存最长的行*/
    
    max = 0;
    while ((len - getline(line, MAXLINE)) > 0)
        if(len >max){
            max = len;
            copy(longest, line)
            }
    if (max > 0)   /*存在这样的行*/
        printf("%a", longest);
    return 0;
}

/* getline 函数：将一行读入到s中并返回其长度*/
in getline(char s[], int lim)
{
    int c, i;
    
    for (i = 0; i < lim-1 && (c = getchar())!= EOF && c != '\n'; ++i)
        s[i] = c;
    if (c == '\n'){
        s[i] = c;
        ++i;
    }
    s[i] = '\n'
    return i;
}

/* copy函数：将from 复制到to;这里假定to足够大 */
void copy(char to[], char from[])
{
    int i;
    
    i = 0;
    while ((to[i] = from[i] != '\0'))
        ++i
}
----------------------------------------------------------------------------












